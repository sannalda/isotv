{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"alignment/","text":"","title":"Alignment"},{"location":"analysis/","text":"","title":"Isoform Analysis"},{"location":"citations/","text":"","title":"Citations"},{"location":"cluster/","text":"","title":"Cluster Computing"},{"location":"configuration/","text":"Configuration NanoIso has two configuration files - environment.yaml , which handles the necessary packages and dependences for the conda environment , and config.yaml , which covers the general and specific pipeline parameters and paths. Pipeline Configuration The pipeline configuration is split into three parts: general, processing and analysis. There are file paths for files and tools that need to be set before running. Specific module specific configuration is discussed in Modules . Below configuration ids can be configured in the config.yaml file or explicitly specified in the command line. General gencode_gtf - Reference gencode gtf file path. human_genome - Reference human genome assembly file path. Processing minimap2 - Minimap2 file path ((((NEEED TO BE DOUBLE CHECKED !!!!)))) samples - Sample name with .fastq extension. For reference, the notation dayX_Y:Z corresponds of the X day and Y replicate from the fastq file Z of the experiment. However, this is only advised and not necessary. Analysis nanopore_gtf - Path to gtf transcript file that was mapped to the de novo transcriptome. Required if not using NanoIso processing. polished_reads - Path to reads with polished sequences. Required if not using NanoIso processing. prosite_dat - Path to prosite.dat . java - Path to java. Not necessary unless Java is not at least version 11. iupred2a - Path to IUPred2A download. porter - Path to Porter5 download. (((DONT KNOW IF THIS IS NECESSARY))) prosite_scan - Path to ps_scan.pl . plaac - Path to plaac.jar .","title":"Configuration"},{"location":"configuration/#configuration","text":"NanoIso has two configuration files - environment.yaml , which handles the necessary packages and dependences for the conda environment , and config.yaml , which covers the general and specific pipeline parameters and paths.","title":"Configuration"},{"location":"configuration/#pipeline-configuration","text":"The pipeline configuration is split into three parts: general, processing and analysis. There are file paths for files and tools that need to be set before running. Specific module specific configuration is discussed in Modules . Below configuration ids can be configured in the config.yaml file or explicitly specified in the command line.","title":"Pipeline Configuration"},{"location":"configuration/#general","text":"gencode_gtf - Reference gencode gtf file path. human_genome - Reference human genome assembly file path.","title":"General"},{"location":"configuration/#processing","text":"minimap2 - Minimap2 file path ((((NEEED TO BE DOUBLE CHECKED !!!!)))) samples - Sample name with .fastq extension. For reference, the notation dayX_Y:Z corresponds of the X day and Y replicate from the fastq file Z of the experiment. However, this is only advised and not necessary.","title":"Processing"},{"location":"configuration/#analysis","text":"nanopore_gtf - Path to gtf transcript file that was mapped to the de novo transcriptome. Required if not using NanoIso processing. polished_reads - Path to reads with polished sequences. Required if not using NanoIso processing. prosite_dat - Path to prosite.dat . java - Path to java. Not necessary unless Java is not at least version 11. iupred2a - Path to IUPred2A download. porter - Path to Porter5 download. (((DONT KNOW IF THIS IS NECESSARY))) prosite_scan - Path to ps_scan.pl . plaac - Path to plaac.jar .","title":"Analysis"},{"location":"disorder/","text":"","title":"Disorder"},{"location":"domain/","text":"","title":"Domain"},{"location":"general/","text":"","title":"General"},{"location":"input/","text":"","title":"Input"},{"location":"introduction/","text":"Introduction NanoIso is snakemake pipeline used to perform individual isoform transcription and translation analysis from Oxford Nanopore Technologies (ONT) long read RNAseq datasets. It also has capabilities to process raw ONTseq data. There are two major parts to the tool: Processing - Mapping and quanitfying full length ONT reads to a de novo transcriptome. Analysis - Individual isoform transcriptional and translational analysis. The Tools summarizes the external tools used for this pipeline. The Installation discusses hows to install the pipeline as well as all the prerequisite tools needed. The Modules covers in depth of the various processes and tools within the pipeline. The Tutorial describes about how to use the pipeline, as well snakemake basics and cluster computing capabilities.","title":"Introduction"},{"location":"introduction/#introduction","text":"NanoIso is snakemake pipeline used to perform individual isoform transcription and translation analysis from Oxford Nanopore Technologies (ONT) long read RNAseq datasets. It also has capabilities to process raw ONTseq data. There are two major parts to the tool: Processing - Mapping and quanitfying full length ONT reads to a de novo transcriptome. Analysis - Individual isoform transcriptional and translational analysis. The Tools summarizes the external tools used for this pipeline. The Installation discusses hows to install the pipeline as well as all the prerequisite tools needed. The Modules covers in depth of the various processes and tools within the pipeline. The Tutorial describes about how to use the pipeline, as well snakemake basics and cluster computing capabilities.","title":"Introduction"},{"location":"overview/","text":"Module Overview The NanoIso tool is split into two similar but smaller pipelines: processing. The processing part maps, aligns, and quantifies raw ONT reads. The analysis part . The tool is constructed in a way that it can be run independently, or in combination. Below is an over schematic diagram of the modules.","title":"Overview"},{"location":"overview/#module-overview","text":"The NanoIso tool is split into two similar but smaller pipelines: processing. The processing part maps, aligns, and quantifies raw ONT reads. The analysis part . The tool is constructed in a way that it can be run independently, or in combination. Below is an over schematic diagram of the modules.","title":"Module Overview"},{"location":"preprocessing/","text":"Preprocessing The preprocessing step involves finding full length transcripts from basecalled raw reads. Filtlong is used to filter reads by their quality, while Pychopper is used to find full length transcripts. Usage Input - RawData/X.fastq Output - Results/Pychopper/X.pychop.fastq snakemake Configuration Below are changes that can be configured in the config.yaml file or explicitly specified in the command line. Filtlong min_mean_q: 5 - Minimum read quality to keep. Pychopper porechop_heu_stringency: 0.25 - Stringency of porechop heuristic. Output Folder Structure | -- FilteredData/ | -- X.fastq ... | -- Results/ | -- Pychopper/ | -- X.pychop.fastq ...","title":"Preprocessing"},{"location":"preprocessing/#preprocessing","text":"The preprocessing step involves finding full length transcripts from basecalled raw reads. Filtlong is used to filter reads by their quality, while Pychopper is used to find full length transcripts.","title":"Preprocessing"},{"location":"preprocessing/#usage","text":"Input - RawData/X.fastq Output - Results/Pychopper/X.pychop.fastq snakemake","title":"Usage"},{"location":"preprocessing/#configuration","text":"Below are changes that can be configured in the config.yaml file or explicitly specified in the command line.","title":"Configuration"},{"location":"preprocessing/#filtlong","text":"min_mean_q: 5 - Minimum read quality to keep.","title":"Filtlong"},{"location":"preprocessing/#pychopper","text":"porechop_heu_stringency: 0.25 - Stringency of porechop heuristic.","title":"Pychopper"},{"location":"preprocessing/#output-folder-structure","text":"| -- FilteredData/ | -- X.fastq ... | -- Results/ | -- Pychopper/ | -- X.pychop.fastq ...","title":"Output Folder Structure"},{"location":"prerequisite/","text":"Prerequisites Even though NanoIso is a snakemake pipeline and python based, many of the tools that implemented are available for linux based operating systems. Most all software requirements are managed by the conda package manager and stored in a conda environment. However, few tools are not managed in conda and need to be installed seperately. Conda Install conda as described at https://conda.io/docs/install/quick.html wget https://conda.io/docs/install/quick.html bash Miniconda3-latest-Linux-x86_64.sh Tools IUPred2A Install IUPred2A as described at https://iupred2a.elte.hu/download_new InterProScan 5 Install InterProScan as described at https://github.com/ebi-pf-team/interproscan/wiki/HowToDownload . Note: Involves additional requirements . Porter5 Install Porter5 as described at https://github.com/mircare/Porter5/ . Note: Involves additional requirements . Prosite Scan Install Prosite Scan from ftp://ftp.expasy.org/databases/prosite/ps_scan/ . wget ftp://ftp.expasy.org/databases/prosite/ps_scan/ps_scan_linux_x86_elf.tar.gz wget ftp://ftp.expasy.org/databases/prosite/prosite.dat PLAAC Install PLAAC from https://github.com/whitehead/plaac . Custom Scripts For all custom scripts, below is a list of all required python packages and versions tested on: Bio pandas numpy subprocess argparse seaborn matplotlib","title":"Prerequisites"},{"location":"prerequisite/#prerequisites","text":"Even though NanoIso is a snakemake pipeline and python based, many of the tools that implemented are available for linux based operating systems. Most all software requirements are managed by the conda package manager and stored in a conda environment. However, few tools are not managed in conda and need to be installed seperately.","title":"Prerequisites"},{"location":"prerequisite/#conda","text":"Install conda as described at https://conda.io/docs/install/quick.html wget https://conda.io/docs/install/quick.html bash Miniconda3-latest-Linux-x86_64.sh","title":"Conda"},{"location":"prerequisite/#tools","text":"","title":"Tools"},{"location":"prerequisite/#iupred2a","text":"Install IUPred2A as described at https://iupred2a.elte.hu/download_new","title":"IUPred2A"},{"location":"prerequisite/#interproscan-5","text":"Install InterProScan as described at https://github.com/ebi-pf-team/interproscan/wiki/HowToDownload . Note: Involves additional requirements .","title":"InterProScan 5"},{"location":"prerequisite/#porter5","text":"Install Porter5 as described at https://github.com/mircare/Porter5/ . Note: Involves additional requirements .","title":"Porter5"},{"location":"prerequisite/#prosite-scan","text":"Install Prosite Scan from ftp://ftp.expasy.org/databases/prosite/ps_scan/ . wget ftp://ftp.expasy.org/databases/prosite/ps_scan/ps_scan_linux_x86_elf.tar.gz wget ftp://ftp.expasy.org/databases/prosite/prosite.dat","title":"Prosite Scan"},{"location":"prerequisite/#plaac","text":"Install PLAAC from https://github.com/whitehead/plaac .","title":"PLAAC"},{"location":"prerequisite/#custom-scripts","text":"For all custom scripts, below is a list of all required python packages and versions tested on: Bio pandas numpy subprocess argparse seaborn matplotlib","title":"Custom Scripts"},{"location":"prion/","text":"","title":"Prion"},{"location":"quantification/","text":"Quantification The quantification step involves remapping and quantifying reads to the de novo transcriptome. Minimap2 is first to map the reads to the transcriptome. Then, few custom scripts are used to normalize the reads using DESeq2 and calculate TPMs. One thing to note here is that because Gffcompare filters redundant transcripts, there could be a potential loss of transcripts with alternative start and stop sites. As such, the mapping index was created from only non-redundant transcripts rather than filtering the transcripts after mapping. Usage Input - Results/Gffcompare/nanopore.combined.gtf Output - Results/Quantification/all_counts_deseq2norm_all.txt\" snakemake Configuration Below are changes that can be configured in the config.yaml file or explicitly specified in the command line. Minimap2 minimap2_opts: -uf - Required for stranded data. maximum_secondary: 200 - Output at most these many secondary alignments. secondary_score_ratio: 1 - Minimum secondary to primary score ratio to output secondary mappings. Output Folder Structure | -- IGV/ | -- X.genome.bam | -- X.genome.bam.bai | -- X.transcriptome.bam | -- X.transcriptome.bam.bai ... | -- Results/ | -- Minimap2/ | -- Transcriptome.mmi | -- Quantification/ | -- X.bam | -- X.sorted.bam | -- X.sorted.bam.bai | -- X.counts | -- counts_all.txt | -- counts_deseq2norm_all.txt ...","title":"Quantification"},{"location":"quantification/#quantification","text":"The quantification step involves remapping and quantifying reads to the de novo transcriptome. Minimap2 is first to map the reads to the transcriptome. Then, few custom scripts are used to normalize the reads using DESeq2 and calculate TPMs. One thing to note here is that because Gffcompare filters redundant transcripts, there could be a potential loss of transcripts with alternative start and stop sites. As such, the mapping index was created from only non-redundant transcripts rather than filtering the transcripts after mapping.","title":"Quantification"},{"location":"quantification/#usage","text":"Input - Results/Gffcompare/nanopore.combined.gtf Output - Results/Quantification/all_counts_deseq2norm_all.txt\" snakemake","title":"Usage"},{"location":"quantification/#configuration","text":"Below are changes that can be configured in the config.yaml file or explicitly specified in the command line.","title":"Configuration"},{"location":"quantification/#minimap2","text":"minimap2_opts: -uf - Required for stranded data. maximum_secondary: 200 - Output at most these many secondary alignments. secondary_score_ratio: 1 - Minimum secondary to primary score ratio to output secondary mappings.","title":"Minimap2"},{"location":"quantification/#output-folder-structure","text":"| -- IGV/ | -- X.genome.bam | -- X.genome.bam.bai | -- X.transcriptome.bam | -- X.transcriptome.bam.bai ... | -- Results/ | -- Minimap2/ | -- Transcriptome.mmi | -- Quantification/ | -- X.bam | -- X.sorted.bam | -- X.sorted.bam.bai | -- X.counts | -- counts_all.txt | -- counts_deseq2norm_all.txt ...","title":"Output Folder Structure"},{"location":"release/","text":"","title":"Release Notes"},{"location":"site/","text":"","title":"Site"},{"location":"source/","text":"Source Below describes the steps to install NanoIso, which requires conda to be installed as described in prerequisites . Download the isoform_analysis pipeline into a folder named isoform_analysis : git clone https://github.molgen.mpg.de/annaldasula/isoform_analysis.git Change the working directory into the new isoform_analysis : cd isoform_analysis Install conda software dependencies with: conda env create --name isoform_analysis --file environment.yaml Initialize the conda environment with: source activate isoform_analysis To deactivate the conda environment after use: source deactivate","title":"Source"},{"location":"source/#source","text":"Below describes the steps to install NanoIso, which requires conda to be installed as described in prerequisites . Download the isoform_analysis pipeline into a folder named isoform_analysis : git clone https://github.molgen.mpg.de/annaldasula/isoform_analysis.git Change the working directory into the new isoform_analysis : cd isoform_analysis Install conda software dependencies with: conda env create --name isoform_analysis --file environment.yaml Initialize the conda environment with: source activate isoform_analysis To deactivate the conda environment after use: source deactivate","title":"Source"},{"location":"start/","text":"","title":"Start"},{"location":"structure/","text":"","title":"Structure"},{"location":"tests/","text":"","title":"Tests"},{"location":"tools/","text":"External Tools NanoIso uses and combines many external tools. Below are references and descriptions for all the tools used. Preprocessing Basecalling Guppy - Basecalling raw reads. Filtlong - Filtering reads by their quality. Full Length Transcripts Pychopper - Finding full length transcripts. Pinfish - Obtaining transcription using genome-based transcript polishing. Mapping Minimap2 - Mapping reads to a de novo defined transcriptome. Gffcompare - Comparing obtained transcription to existing annotation. Analysis Disorder IUPred2A - Identify regions of disorder in proteins. Domain InterProScan - Command line version of InterPro, allowing to predict a protein's function using data gathered from many different resources. Structure Porter5 - Protein secondary structure prediction. Phosphorylation Sites ScanProsite - Scans for phosphorylation binding motifs. Prion PLAAC - Identify prion subsequences.","title":"Tools"},{"location":"tools/#external-tools","text":"NanoIso uses and combines many external tools. Below are references and descriptions for all the tools used.","title":"External Tools"},{"location":"tools/#preprocessing","text":"","title":"Preprocessing"},{"location":"tools/#basecalling","text":"Guppy - Basecalling raw reads. Filtlong - Filtering reads by their quality.","title":"Basecalling"},{"location":"tools/#full-length-transcripts","text":"Pychopper - Finding full length transcripts. Pinfish - Obtaining transcription using genome-based transcript polishing.","title":"Full Length Transcripts"},{"location":"tools/#mapping","text":"Minimap2 - Mapping reads to a de novo defined transcriptome. Gffcompare - Comparing obtained transcription to existing annotation.","title":"Mapping"},{"location":"tools/#analysis","text":"","title":"Analysis"},{"location":"tools/#disorder","text":"IUPred2A - Identify regions of disorder in proteins.","title":"Disorder"},{"location":"tools/#domain","text":"InterProScan - Command line version of InterPro, allowing to predict a protein's function using data gathered from many different resources.","title":"Domain"},{"location":"tools/#structure","text":"Porter5 - Protein secondary structure prediction.","title":"Structure"},{"location":"tools/#phosphorylation-sites","text":"ScanProsite - Scans for phosphorylation binding motifs.","title":"Phosphorylation Sites"},{"location":"tools/#prion","text":"PLAAC - Identify prion subsequences.","title":"Prion"},{"location":"transcriptome/","text":"Building De Novo Transcriptome The building transcriptome step involves constructing a de novo based transcriptome. These annotations resemble Minimap2 is first used to construct an initial index mapping to the genome. Then, Pinfish is used to polish the genome-based transcript to obtain the transcriptome, while Gffcompare compares the transcripts to the existing annotation to determine any potential redundant reads. This part of the pipeline is primarly based on the ont_tutorial_pinfish released by Nanopore Technologies. Usage Input - /path/to/genome/faste/X.fa Results/Pychopper/X.pychop.fastq Output - Results/Gffcompare/nanopore.combined.gtf snakemake Configuration Below are changes that can be configured in the config.yaml file or explicitly specified in the command line. Minimap2 minimap2_opts_junction: TRUE - Use annotation to improve splice junction mapping. minimap2_opts: -uf - Required for stranded data. minimum_mapping_quality: 5 - Minimum mapping quality. minimap2_opts_polished: -s - Required for stranded data. Pinfish spliced_bam2gff: 0.25 - Stringency of porechop heuristic. minimum_cluster_size: 3 - Minimum size to cluster transcripts. exon_boundary_tolerance: 10 - Exon boundary tolerance. terminal_exon_boundary_tolerance: 50 - Terminal exon boundary tolerance. minimum_isoform_percent: 1 - Minimum percentage of reads necessary to call an isoform. collapse_internal_tol: 5 - Internal exon boundary tolerance. collapse_five_tol: 500 - 5' boundary tolerance. collapse_three_tol: 50 - 3' boundary tolerance. spliced_bam2gff_opts_pol: -s - Required for stranded data. Output Folder Structure | -- ReferenceData/ | -- junctions.bed ... | -- Results/ | -- Minimap2/ | -- ReferenceFasta.mmi | -- merged.mapping.bam | -- Pinfish/ | -- raw_transcripts.gff | -- clustered_pol_transcripts.pol_gff | -- cluster_memberships.tsv | -- clustered_transcripts_collapsed.gff | -- polished_transcripts.fas | -- polished_reads_aln_sorted.bam | -- polished_transcripts.gff | -- polished_transcripts_collapsed.gff | -- corrected_transcriptome_polished_collapsed.fas | -- corrected_transcriptome_polished_collapsed_nonred.fas | -- Gffcompare/ | -- nanopore.combined.gtf ...","title":"Transcriptome"},{"location":"transcriptome/#building-de-novo-transcriptome","text":"The building transcriptome step involves constructing a de novo based transcriptome. These annotations resemble Minimap2 is first used to construct an initial index mapping to the genome. Then, Pinfish is used to polish the genome-based transcript to obtain the transcriptome, while Gffcompare compares the transcripts to the existing annotation to determine any potential redundant reads. This part of the pipeline is primarly based on the ont_tutorial_pinfish released by Nanopore Technologies.","title":"Building De Novo Transcriptome"},{"location":"transcriptome/#usage","text":"Input - /path/to/genome/faste/X.fa Results/Pychopper/X.pychop.fastq Output - Results/Gffcompare/nanopore.combined.gtf snakemake","title":"Usage"},{"location":"transcriptome/#configuration","text":"Below are changes that can be configured in the config.yaml file or explicitly specified in the command line.","title":"Configuration"},{"location":"transcriptome/#minimap2","text":"minimap2_opts_junction: TRUE - Use annotation to improve splice junction mapping. minimap2_opts: -uf - Required for stranded data. minimum_mapping_quality: 5 - Minimum mapping quality. minimap2_opts_polished: -s - Required for stranded data.","title":"Minimap2"},{"location":"transcriptome/#pinfish","text":"spliced_bam2gff: 0.25 - Stringency of porechop heuristic. minimum_cluster_size: 3 - Minimum size to cluster transcripts. exon_boundary_tolerance: 10 - Exon boundary tolerance. terminal_exon_boundary_tolerance: 50 - Terminal exon boundary tolerance. minimum_isoform_percent: 1 - Minimum percentage of reads necessary to call an isoform. collapse_internal_tol: 5 - Internal exon boundary tolerance. collapse_five_tol: 500 - 5' boundary tolerance. collapse_three_tol: 50 - 3' boundary tolerance. spliced_bam2gff_opts_pol: -s - Required for stranded data.","title":"Pinfish"},{"location":"transcriptome/#output-folder-structure","text":"| -- ReferenceData/ | -- junctions.bed ... | -- Results/ | -- Minimap2/ | -- ReferenceFasta.mmi | -- merged.mapping.bam | -- Pinfish/ | -- raw_transcripts.gff | -- clustered_pol_transcripts.pol_gff | -- cluster_memberships.tsv | -- clustered_transcripts_collapsed.gff | -- polished_transcripts.fas | -- polished_reads_aln_sorted.bam | -- polished_transcripts.gff | -- polished_transcripts_collapsed.gff | -- corrected_transcriptome_polished_collapsed.fas | -- corrected_transcriptome_polished_collapsed_nonred.fas | -- Gffcompare/ | -- nanopore.combined.gtf ...","title":"Output Folder Structure"},{"location":"translation/","text":"","title":"Translation"},{"location":"visualization/","text":"","title":"Report"}]}